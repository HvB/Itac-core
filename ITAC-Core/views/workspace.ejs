<!DOCTYPE html>
<html>
  <head>
    <title><%= title %></title>

	<% include entete %>.

 	<link rel="stylesheet"  href="/stylesheets/styleClientCollab.css" />

    <script language="JavaScript" type="text/javascript" src="/socket.io-client/socket.io.js"></script>
    <script language="JavaScript" type="text/javascript" src="/javascripts/interact.js"></script>
   
		
  </head>

  <!-- le corps est la ZP et ne contient que le menu -->
  <body id="ZP">
  
 	 <div id="menu" class="menu hand"></div>
 
  </body > 
  

  
<script type="text/javascript">

// Attente fin de chargement
if(jQuery.ui){
	//alert(" jQuery.ui loaded")
}
else {
	alert(" jQuery.ui non chargée")
}


  
// Récupération des variables passées depuis routes/workspace.js

		var urldemande = '<%= urldemande %>';
		var zpdemande = '<%= myZP %>';
		var rang= '<%= rangZP %>';
		
		// on déclare l'objet myZC qui va être la zone collaborative
		var myZC = {};
		var ZEmax= '<%= NbZEMax %>';;
		
		// tableau qui va permettre de positionner correctement les zones d'échange (position, taille, orientation)
		var paramAffichageZE = [];


// *********************** Partie connexion *****************************		
		console.log('PAGE : workspace.ejs -> demande connexion socket sur : '+ urldemande);
		
		var socket = io.connect(urldemande, {transports:['websocket']});
   		console.log('PAGE : workspace.js -> connexion socket [OK] ');
   
   		/* ------------------------------------------------*/
		/* --- premiere connexion ZA (Zone d'Activité = Serveur ?)---*/
		/* ------------------------------------------------*/
    	
    	socket.emit('EVT_DemandeConnexionZA', urldemande, zpdemande);
    	console.log('PAGE : workspace.ejs -> emission evenement EVT_DemandeConnexionZA pour ZP= '+zpdemande);
    			
		socket.on('EVT_ReponseOKConnexionZA',function(ZC) {
	  	
			// on récupère tout le paramétrage de la Zone Collaborative
			myZC = ZC;
			
			// [TC] Pourquoi les logs suivants sont faits avec le paramètre formel ZC et non myZC?  >corrigé
    		alert('Zone collaborative active : '+ myZC.idZC+'\n\nBienvenue sur l\'Espace de Partage :'+myZC.ZP[rang].idZP+'\n\n');
    		console.log('PAGE : workspace.ejs -> reception evenement [EVT_ReponseOKConnexionZA] pour ZP= '+myZC.ZP[rang].idZP);
    		
    		// là-dessous on a typeZP qui n'apparait pas
    		console.log('PAGE : workspace.ejs -> paramètre de ZP = '+JSON.stringify(myZC.ZP[rang]));
    	
    		// on lance le calcul des paramètres d'affichage
    		Calcule_Nb_ZE(ZEmax);
    		console.log('PAGE : workspace.ejs -> calcul taille ZE , NB_ZE_Largeur = '+NB_ZE_Largeur+' NB_ZE_Hauteur = '+NB_ZE_Hauteur);
    		console.log('PAGE : workspace.ejs -> calcul taille ZE , TailleZEenlargeur = '+TailleZEenlargeur+ ' TailleZEenhauteur = '+TailleZEenhauteur);
    		
    		// on cree les DIV pour les ER  [TC]  Les ZE non???
    		$( document ).ready(function() {
				for(var i=1; i<=ZEmax; i++) 
				{
				    var codeZE='ZE'+i;
 					paramAffichageZE[codeZE] = new Array(0,0,0,0,0);
 					
 					if (i <= NB_ZE_Largeur) {
	 					paramAffichageZE[codeZE][0]=TailleZEenlargeur; // largeur
	 					paramAffichageZE[codeZE][1]=40;				 // hauteur
	 					paramAffichageZE[codeZE][2]=180;				 // rotation
	 					paramAffichageZE[codeZE][3]=-10;				 // pos X
	 					paramAffichageZE[codeZE][4]=50;                // pos Y 
 					}
 					else if (i <= NB_ZE_Largeur+NB_ZE_Hauteur) {
 						paramAffichageZE[codeZE][0]=40;
	 					paramAffichageZE[codeZE][1]=TailleZEenhauteur;
	 					paramAffichageZE[codeZE][2]=270;
	 					paramAffichageZE[codeZE][3]=-10;
	 					paramAffichageZE[codeZE][4]=50;
 					}
 					else if (i <= 2* NB_ZE_Largeur+NB_ZE_Hauteur) {
 						paramAffichageZE[codeZE][0]=TailleZEenlargeur;
	 					paramAffichageZE[codeZE][1]=40;
	 					paramAffichageZE[codeZE][2]=0;
	 					paramAffichageZE[codeZE][3]=-10;
	 					paramAffichageZE[codeZE][4]=50;
 					}
 					else  {
 						paramAffichageZE[codeZE][0]=40;
	 					paramAffichageZE[codeZE][1]=TailleZEenhauteur;
	 					paramAffichageZE[codeZE][2]=90;
	 					paramAffichageZE[codeZE][3]=-10;
	 					paramAffichageZE[codeZE][4]=50;
 					}
 					$("<div  id="+codeZE+"  class='zoneEchange' style ='position:relative ; top: "+paramAffichageZE[codeZE][3]+" ; right: "+paramAffichageZE[codeZE][4]+" ; width:"+paramAffichageZE[codeZE][0] +" ; height :"+paramAffichageZE[codeZE][1] +"'  > </div>").appendTo("#ZP");
				}
			});
    		console.log('PAGE : workspace.js -> creation de div ZE nb='+ZEmax);
    		
    		
    		
    		
   		 });
   
		socket.on('EVT_ReponseNOKConnexionZA',function(ZC) {
    		myZC = ZC;
    		alert('Zone collaborative active : '+ myZC.idZC+'\n\nImpossible d\'acceder a l\'Espace de Partage :'+myZC.ZP[rang].idZP+'\n\n');
    		console.log('PAGE : workspace.js -> reception evenement [EVT_ReponseNOKConnexionZA] pour ZP= '+myZC.ZP[rang].idZP);
    	});
    	
    	/* ----------------------------- */
    	/* ----- connection d'une ZE ----*/
    	/* ----------------------------- */


	    socket.on('EVT_NewZEinZP', function(pseudo, idZE ,idZEP, posAvatar)
  			{
    		alert('Creation d une ZE ='+idZE+' \n ZEP associee = '+idZEP+'\n Pour pseudo='+pseudo);
    		
    		$(function () {
        		
        		$("#"+idZE+"").slideDown(1000);

        	// $("<div  id="+idZE+"  class='zoneEchange' > <img id =avatar"+idZE+" ></img> </div>").appendTo("#ZP"); //Creation de la zone

			//$("#"+idZE+"").draggable({ drag: function (event, ui) {if($(this).find('div.artefact').length !=0){$this.draggable('option', 'disabled', true)}}  })
			//$("#"+idZE+"").click(function() { $(this).toggleClass('rotated')})
			/*
				$("#"+idZE+"").click(function() {
				var angle = ($(this).data('angle')+90)||90;
				$(this).css({'transform': 'rotate('+ angle +'deg)'});
				$(this).data('angle', angle);

			})*/
        	/*interact("#"+idZE+"")
       	 
        	  .resizable({
        	    preserveAspectRatio: false,
        	    edges: { left: true, right: true, bottom: true, top: true }
        	  })
        	  .on('resizemove', function (event) {
        	    var target = event.target,
        	        x = (parseFloat(target.getAttribute('data-x')) || 0),
        	        y = (parseFloat(target.getAttribute('data-y')) || 0);

        	    // update the element's style
        	    target.style.width  = event.rect.width + 'px';
        	    target.style.height = event.rect.height + 'px';

        	    // translate when resizing from top or left edges
        	    x += event.deltaRect.left;
        	    y += event.deltaRect.top;

        	    target.style.webkitTransform = target.style.transform =
        	        'translate(' + x + 'px,' + y + 'px)';

        	    target.setAttribute('data-x', x);
        	    target.setAttribute('data-y', y);
        	  });*/
    	})
  		}	)
    	
    	/* ------------------------------------------ */
    	/* ----- arrive d'un Artifact dans une ZE ----*/
    	/* ------------------------------------------ */
    	
    	socket.on('EVT_ReceptionArtefactIntoZE',function(pseudo,idZE,chaineJSON)

    	{ 
    		console.log('PAGE : workspace.ejs -> reception evenement [EVT_ReceptionArtefactIntoZE] pour ZE= '+idZE);

 
    		art=JSON.parse(chaineJSON)

    		if (art.typeArtefact == "image") {
           		art.contenu=(art.contenu).replace(/(\r\n|\n|\r)/gm, ""); //supprimer les caractére spéciaux

    	
             	var target = $("<div id="+art.idAr+" class='draggable artefact img dropped-image' style='background-image: url(data:image/png;base64,"+art.contenu+")'> </div>");
    		}
    		
    		
    		else {
           		art.contenu=(art.contenu).replace(/(\r\n|\n|\r)/gm, "</br>"); //pour le saut de ligne

	    		  var target = $("<div id="+art.idAr+" class='draggable artefact dropped-msg left'>  <h1> "+art.titre+" </h1> <p style ='display : none'> "+art.contenu+" </p> </div>")

    		}

   		 target.appendTo("#"+idZE+""); 

    	})
    	
    	/* ------------------------------------------------ */
    	/* ----- arrive d'un Artifact directement en ZP ----*/
    	/* ------------------------------------------------ */

		socket.on('EVT_ReceptionArtefactIntoZP', function (pseudo,idZP,chaineJSON)
		{

    		console.log('PAGE : workspace.ejs -> reception evenement [EVT_ReceptionArtefactIntoZP] pour ZP= '+idZP);

			art=JSON.parse(chaineJSON)

   			if (art.typeArtefact == "image") 
   			{
    			art.contenu=(art.contenu).replace(/(\r\n|\n|\r)/gm, ""); 
    			var target = $("<div id="+art.idAr+" class='draggable artefact img' style='left:50%; top:50%; position: relative; background-image: url(data:image/png;base64,"+art.contenu+")'> </div>");
   			}
   			else {

       			art.contenu=(art.contenu).replace(/(\r\n|\n|\r)/gm, "</br>"); 
	   			var target = $("<div id="+art.idAr+" class='draggable artefact' style='left:50%; top:50% ;position: relative;'>  <h1> "+art.titre+" </h1> <p> "+art.contenu+" </p> </div>");
   			}
		 	target.appendTo("#ZP"); 
		})
 
    

//////////////////////////////////////////////////////////////////////////////////////////////
socket.on('EVT_Deconnexion', function (pseudo, idZE) {
//alert("Deconnection")
//alert(idZE)
//$("#test0").fadeIn();
//if($("#"+idZE+"").find('div.artefact').length !=0) { alert("deconnexion interdit")} 
 $("#"+idZE+"").fadeOut() ; 

	//var cnt = $("#"+idZE+"").contents();
	//$("#"+idZE+"").replaceWith(cnt);
	
	//var myarr=[];
	$(function() {
		$("#"+idZE+"").children("div","img").each (function ()
				
				{
			//myarr[myarr.length]=$(this).attr('id')
			var className =$(this).attr('class');
			var idAr =  $(this).attr('id');
			//$("#"+idZE+"").find("div[id="+idAr+"]");
	var position = $(this).position()
	function getRotationDegrees(obj) { //stocker l'angle de la rotation
var matrix = obj.css("-webkit-transform") ||
obj.css("-moz-transform")    ||
obj.css("-ms-transform")     ||
obj.css("-o-transform")      ||
obj.css("transform");
if(matrix !== 'none') {
    var values = matrix.split('(')[1].split(')')[0].split(',');
    var a = values[0];
    var b = values[1];
    var angle = Math.round(Math.atan2(b, a) * (180/Math.PI));
} else { var angle = 0; }
return angle;
}

angle1= getRotationDegrees($(this));
alert(angle1)

if (className == "draggable artefact"){ 
	
	//art.contenu=(art.contenu).replace(/(\r\n|\n|\r)/gm, "</br>"); 
	var titre= $(this).find("h1").text();
	var message= $(this).find("p").text();
	

	   var target = $("<div id="+idAr+" class='draggable artefact' style='left:"+position.left+"; top:"+position.top+" ;position: absolute; transform: rotate("+angle1+"deg)'>  <h1> "+titre+" </h1> <p> "+message+" </p> </div>");
}

//if (className == "draggable artefact img "/*(art.typeArtefact == "image")*/)
else {
	//art.contenu=(art.contenu).replace(/(\r\n|\n|\r)/gm, ""); 
	//var cnt= $(this).text();
	var bg = $(this).css('background-image'); //l'image
	bg=bg.replace('url(','').replace(')','');
	var target = $("<div id="+idAr+" class='draggable artefact img' style='left:"+position.left+"; top:"+position.top+" position: absolute; transform: rotate("+angle1+"deg)'> </div>").css("background-image", "url("+bg+")");
}//alert($(this).attr('id'))
target.appendTo("#ZP"); 

	});
		});
	
	
//	$("#"+idZE+"").replaceWith(function () { return $('.artefact', this); }) //suppression de la zone

	
	//var ID = $("#"+idZE+"").children("div").attr("id");
	//alert(ID)
		//var target = $("#"+idZE+"").children("div");

	 //var target = $("<div id="+art.idAr+" class='draggable artefact' style='left:50%; top:50%'>  <h1> "+art.titre+" </h1> <p> "+art.contenu+" </p> </div>")
	   
	
		// target.appendTo("#ZP"); 
})

//////////////////////////////////////////////////////////////////////////////////////////////
 socket.on ('EVT_ArtefactDeletedFromZE', function (idAr, idZE, idZEP)
		 {
	 //art=JSON.parse(chaineJSON)
	//alert(idAr+ " from " +idZE);
	 //var idAr= art.idAr;
	// $("#"+idAr+"").remove();
	$("#"+idZE+"").find("div[id="+idAr+"]").remove();

	//var target = ("#"+idAr+"");
	//$(target).remove();
	
		 })
		 
 ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  
</script>
<script type="text/javascript">
var angle = 0; //angle de rotation
scale = 1; //facteur de zoom

interact('.dropped-msg').gesturable ({ //les artefact dans la ZE ne peuvent pas etre manipuler (zoom, rotation) 
enabled: true
})
interact('.artefact').gesturable({ // 
onmove: function (event) {


var target = event.target,
        // keep the dragged position in the data-x/data-y attributes
        x = (parseFloat(target.getAttribute('data-x')) || 0) + event.dx, //les positions x et y 
        y = (parseFloat(target.getAttribute('data-y')) || 0) + event.dy;


    // update the posiion attributes
    target.setAttribute('data-x', x); //fonction de mise a jour de x et  
    target.setAttribute('data-y', y);


    // Update scale
   scale = scale * (1 + event.ds); //mise à jour de la zoom 

    // Update angle, movement, and scale
    angle += event.da; //mise à jour de l'angle 
    target.style.webkitTransform = target.style.transform =   'translate(' + x + 'px, ' + y + 'px)' + ' ' + 'rotate(' + angle + 'deg)' + ' ' + 'scale(' + scale + ')' ;//modification de la forme de l'artefact 

},
onend : function(event){
}
}).draggable({ //glisser l'artefact

	inertia:true,
onstart: function (event) {

var maxZ = Math.max.apply(null,  //appliquer une z-index max pour l'artefact en cours de manipulation
$.map($('body > *'), function(e,n) {
  if ($(e).css('position') != 'static')
    return parseInt($(e).css('z-index')) || 1;
}));

  //event.target.style.background = 'red';
  event.target.style.zIndex = maxZ + 1; 
//  event.target.style.position = 'relative'; 
},
onmove: dragMoveListener, //fonction responsable de glissement
//appeler cette fontion a chaque fin de l'action de glissement 
onend: function (event) {}
    })
    
function dragMoveListener (event) {

alert("c'est là?: 1");
var target = event.target,
        // keep the dragged position in the data-x/data-y attributes
        x = (parseFloat(target.getAttribute('data-x')) || 0) + event.dx,
        y = (parseFloat(target.getAttribute('data-y')) || 0) + event.dy,
       
        scaleX = target.getBoundingClientRect().width / target.offsetWidth,
        scaleY = target.getBoundingClientRect().height / target.offsetHeight,

     

        sc = (scaleX+scaleY)/2;
  


function getRotationDegrees(obj) { //stocker l'angle de la rotation
var matrix = obj.css("-webkit-transform") ||
obj.css("-moz-transform")    ||
obj.css("-ms-transform")     ||
obj.css("-o-transform")      ||
obj.css("transform");
if(matrix !== 'none') {
    var values = matrix.split('(')[1].split(')')[0].split(',');
    var a = values[0];
    var b = values[1];
    var angle = Math.round(Math.atan2(b, a) * (180/Math.PI));
} else { var angle = 0; }
return angle;
}

angle1= getRotationDegrees($(target));
//alert(angle1)


    // update the position attributes
    target.setAttribute('data-x', x);
    target.setAttribute('data-y', y);


    // Update scale
  //sc = scale ;

    // Update angle, movement, and scale
   // angle1 += event.da;
   var zoom =  target.style.webkitTransform = target.style.transform =   'scale(' + sc + ')' ;
   var rot =  target.style.webkitTransform = target.style.transform =   'rotate(' + angle1 + 'deg)';

    target.style.webkitTransform = target.style.transform =   'translate(' + x + 'px, ' + y + 'px)' +  ' ' + rot /*+  ' ' + zoom */; //+ ' ' + 'rotate(' + angle + 'deg)' + ' ' + 'scale(' + sc + ')' ;

}

</script>

<script type="text/javascript">
    //le point est draggable
interact('.point')
  .draggable({
    inertia: true,
//l element reste dans sa zone limite , il peut pas sortir de son parent 
    restrict: {
    // restriction: "parent",
      endOnly: true,
      elementRect: { top: 0, left: 0, bottom: 1, right: 1 }
    },
    // activer autoScroll
    autoScroll: true,


//appeler cette fonction a chaque action de glissement 
    onmove: dragMoveListener,
//appeler cette fontion a chaque fin de l'action de glissement 
    onend: function (event) {
    
    }
  })  

interact('.img')
  //selectionner limage avec double click
    //.on('doubletap', function (event) {
    // event.currentTarget.classList.toggle('selected')
     

 // });
    //aprés le double click on crée les points par simple click
/*interact('.selected')*/.on('tap' , function (event) { 
  var ID=event.currentTarget.id;
  //alert(ID);
$("<div  id= 'notate' class='draggable point' >  </div>").appendTo("#"+ID+"");
     })



//fonction de glissement toujours appeler lorsque on fait le drag and drop
  function dragMoveListener (event) {
    alert("C'est là?: 2");
    var target = event.target,
        // stocker la position dans les attributs data-x/data-y
        x = (parseFloat(target.getAttribute('data-x')) || 0) + event.dx,
        y = (parseFloat(target.getAttribute('data-y')) || 0) + event.dy;

    // translation de l'element
    target.style.webkitTransform =
    target.style.transform =
      'translate(' + x + 'px, ' + y + 'px)';

    // mis à jour de la position 
    target.setAttribute('data-x', x);
    target.setAttribute('data-y', y);
  }

  window.dragMoveListener = dragMoveListener;

  </script>



<script type="text/javascript">

//les zones de drops ( zones d'echange) 

interact('.zoneEchange').dropzone({
//accepter just les element ayant la class artefact
accept: '.artefact',


//il faut 10% de l'element soit dans la zone pour que le drop est possible 
overlap: 0.1,

//les evenement de drop

ondropactivate: function (event) {
//activer la zone de drop
 event.target.classList.add('drop-active');
},
//lorsque lacrefact entre la zone
ondragenter: function (event) {

 var draggableElement = event.relatedTarget,
     zoneEchangeElement = event.target,

dropRect= interact.getElementRect(event.target),
dropCenter = {
x: dropRect.left+dropRect.width / 2 , 
y: dropRect.top+dropRect.height /2
};

//la possibilité de drop  
 zoneEchangeElement.classList.add('drop-target');
 draggableElement.classList.add('can-drop');

},

ondragleave: function (event) {
//supprimer les classes ajoutées aprés le drop 
 event.target.classList.remove('drop-target');
 event.relatedTarget.classList.remove('can-drop');
 event.relatedTarget.classList.remove('dropped-image');
 event.relatedTarget.classList.remove('dropped-msg');
 event.relatedTarget.classList.remove('left');
 event.relatedTarget.classList.remove('right');
 event.relatedTarget.classList.remove('top');
 var idAr = event.relatedTarget.id;
 var idZE=event.target.id;
 //alert("artefact numero " +idAr +" de " +idZE)

 socket.emit('EVT_EnvoieArtefactdeZEversZP', idAr, idZE , 'test');
 
 
//revenir à la classe initialle 
 //event.relatedTarget.classList.add('artefact');
 $(event.relatedTarget).find("p").show();
 //affichage du contenu
},
ondrop: function (event) {
//les evenements aprés le drop
var idAr = event.relatedTarget.id;
var idZE=event.target.id;

event.relatedTarget.classList.remove('can-drop');

var titre = $(event.relatedTarget).find("h1").text(); //le titre de lartefact
var message= $(event.relatedTarget).find("p").text();  //le contenu

var bg = $(event.relatedTarget).css('background-image'); //l'image
bg=bg.replace('url(','').replace(')','');
var className = $(event.relatedTarget).attr('class');

if ( (className != "draggable artefact dropped-msg") & (className != "draggable artefact img dropped-image") & (className != "draggable artefact img dropped-image right")& (className != "draggable artefact img dropped-image left")& (className != "draggable artefact img dropped-image top") & (className != "draggable artefact dropped-msg left")& (className != "draggable artefact dropped-msg right ")& (className != "draggable artefact dropped-msg top"))
{
var idAr = event.relatedTarget.id;
var idZE=event.target.id;

//alert("envoie art " +idAr+" vers " +idZE)
socket.emit('EVT_EnvoieArtefactdeZPversZE', idAr, idZE);

}



//selon la classe (image ou artefact normal) on organise les drops (rotations et affichage)
var className = $(event.relatedTarget).attr('class');

   $(event.relatedTarget).hide();
if (event.target.id == "test0") {

  if (className == "draggable artefact")  {

$("<div  id= "+event.relatedTarget.id+" class='draggable artefact dropped-msg left' >  <h1> "+titre+" </h1> <p style='display:none'> "+message+" </p> </div>").appendTo(event.target);

}
else if ((className == "draggable artefact img") || (className == "draggable artefact img selected")) {
$("<div  id= "+event.relatedTarget.id+" class='draggable artefact img dropped-image left' > <h1> "+titre+" </h1> <p style='display:none'> "+message+" </p> </div>").appendTo(event.target).css("background-image", "url("+bg+")");
}

else if (className == "draggable artefact dropped-msg left") {

$("<div  id= "+event.relatedTarget.id+" class='draggable artefact dropped-msg left' >  <h1> "+titre+" </h1> <p style='display:none'> "+message+" </p> </div>").appendTo(event.target);
;
}

else if (className == "draggable artefact img dropped-image left") {
$("<div  id= "+event.relatedTarget.id+" class='draggable artefact img dropped-image left' > <h1> "+titre+" </h1> <p style='display:none'> "+message+" </p> </div>").appendTo(event.target).css("background-image", "url("+bg+")");
}
else if (className == "draggable artefact dropped-msg") {

$("<div  id= "+event.relatedTarget.id+" class='draggable artefact dropped-msg left' >  <h1> "+titre+" </h1> <p style='display:none'> "+message+" </p> </div>").appendTo(event.target);
;
}

else if (className == "draggable artefact img dropped-image left") {
$("<div  id= "+event.relatedTarget.id+" class='draggable artefact img dropped-image left' > <h1> "+titre+" </h1> <p style='display:none'> "+message+" </p> </div>").appendTo(event.target).css("background-image", "url("+bg+")");
}




}

else if (event.target.id == "test4") {

if (className == "draggable artefact") {

$("<div  id= "+event.relatedTarget.id+" class='draggable artefact dropped-msg right' > <h1> "+titre+" </h1> <p style='display:none'> "+message+" </p> </div>").appendTo(event.target);
}
else if ((className == "draggable artefact img") || (className == "draggable artefact img selected")) {
$("<div  id= "+event.relatedTarget.id+" class='draggable artefact img dropped-image right' > <h1> "+titre+" </h1> <p style='display:none'> "+message+" </p> </div>").appendTo(event.target).css("background-image", "url("+bg+")");
}


else if (className == "draggable artefact dropped-msg right") {

$("<div  id= "+event.relatedTarget.id+" class='draggable artefact dropped-msg right' >  <h1> "+titre+" </h1> <p style='display:none'> "+message+" </p> </div>").appendTo(event.target);

}

else if (className == "draggable artefact img dropped-image right") {
$("<div  id= "+event.relatedTarget.id+" class='draggable artefact img dropped-image right' > <h1> "+titre+" </h1> <p style='display:none'> "+message+" </p> </div>").appendTo(event.target).css("background-image", "url("+bg+")");
}
else if (className == "draggable artefact dropped-msg ") {

$("<div  id= "+event.relatedTarget.id+" class='draggable artefact dropped-msg right' >  <h1> "+titre+" </h1> <p style='display:none'> "+message+" </p> </div>").appendTo(event.target);

}

else if (className == "draggable artefact img dropped-image ") {
$("<div  id= "+event.relatedTarget.id+" class='draggable artefact img dropped-image right' > <h1> "+titre+" </h1> <p style='display:none'> "+message+" </p> </div>").appendTo(event.target).css("background-image", "url("+bg+")");
}



}
else if ((event.target.id == "test1") || (event.target.id == "test2")  || (event.target.id == "test3")  ) 
{

if (className == "draggable artefact") {

$("<div  id= "+event.relatedTarget.id+" class='draggable artefact dropped-msg top' > <h1> "+titre+" </h1>  <p style='display:none'> "+message+" </p> </div>").appendTo(event.target);
}
else if ((className == "draggable artefact img") || (className == "draggable artefact img selected")) {
$("<div  id= "+event.relatedTarget.id+" class='draggable artefact img dropped-image top' > <h1> "+titre+" </h1> <p style='display:none'> "+message+" </p> </div>").appendTo(event.target).css("background-image", "url("+bg+")");
}
else if (className == "draggable artefact dropped-msg top") {

$("<div  id= "+event.relatedTarget.id+" class='draggable artefact dropped-msg top' >  <h1> "+titre+" </h1> <p style='display:none'> "+message+" </p> </div>").appendTo(event.target);

}

else if (className == "draggable artefact img dropped-image top") {
$("<div  id= "+event.relatedTarget.id+" class='draggable artefact img dropped-image top' > <h1> "+titre+" </h1> <p style='display:none'> "+message+" </p> </div>").appendTo(event.target).css("background-image", "url("+bg+")");
}
else if (className == "draggable artefact dropped-msg") {

$("<div  id= "+event.relatedTarget.id+" class='draggable artefact dropped-msg top' >  <h1> "+titre+" </h1> <p style='display:none'> "+message+" </p> </div>").appendTo(event.target);

}

else if (className == "draggable artefact img dropped-image") {
$("<div  id= "+event.relatedTarget.id+" class='draggable artefact img dropped-image top' > <h1> "+titre+" </h1> <p style='display:none'> "+message+" </p> </div>").appendTo(event.target).css("background-image", "url("+bg+")");
}


}
else {

if ((className == "draggable artefact") || (className == "draggable artefact selected"))   {

$("<div  id= "+event.relatedTarget.id+" class='draggable artefact dropped-msg ' > <h1> "+titre+" </h1> <p style='display:none'> "+message+" </p> </div>").appendTo(event.target);
}

else if ((className == "draggable artefact img") || (className == "draggable artefact img selected")) {
$("<div  id= "+event.relatedTarget.id+" class='draggable artefact img dropped-image ' > <h1> "+titre+" </h1> <p style='display:none'> "+message+" </p> </div>").appendTo(event.target).css("background-image", "url("+bg+")");
}


else if (className == "draggable artefact dropped-msg")  {

$("<div  id= "+event.relatedTarget.id+" class='draggable artefact dropped-msg' > <h1> "+titre+" </h1> <p style='display:none'> "+message+" </p> </div>").appendTo(event.target);

}

else if (className == "draggable artefact img dropped-image")  {
$("<div  id= "+event.relatedTarget.id+" class='draggable artefact img dropped-image ' > <h1> "+titre+" </h1> <p style='display:none'> "+message+" </p> </div>").appendTo(event.target).css("background-image", "url("+bg+")");
}

}


},
ondropdeactivate: function (event) {
	

//supprimer le drop-active class de la zone de drop 

 event.target.classList.remove('drop-active');
 event.target.classList.remove('drop-target');
}
});


//fonction de glissement toujours appeler lorsque on fait le drag and drop
  function dragMoveListener (event) {
    //alert("C'est le premier dragMoveListener");
    var target = event.target,
        // stocker la position dans les attributs data-x/data-y
        x = (parseFloat(target.getAttribute('data-x')) || 0) + event.dx,
        y = (parseFloat(target.getAttribute('data-y')) || 0) + event.dy;

    // translation de l'element
    target.style.webkitTransform =
    target.style.transform =
      'translate(' + x + 'px, ' + y + 'px)';

    // mis à jour de la position 
    target.setAttribute('data-x', x);
    target.setAttribute('data-y', y);
  }

//le menu est draggable
interact('.menu')
  .draggable({
    inertia: true,
//l element reste dans sa zone limite , il peut pas sortir de son parent 
    restrict: {
     restriction: "parent",
      endOnly: true,
      elementRect: { top: 0, left: 0, bottom: 1, right: 1 }
    },
    // activer autoScroll
    autoScroll: true,


//appeler cette fonction a chaque action de glissement 
    onmove: dragMoveListener,
//appeler cette fontion a chaque fin de l'action de glissement 
    onend: function (event) {
    
    }
  })  

</script>


<!-- pas utilisé pour le moment  

<script type="text/javascript">

//les zones de drops ( zones de partage) 

interact('#ZP').dropzone({
//accepter just les element ayant la class artefact
accept: '.artefact',

//il faut 50% de l'element soit dans la zone pour que le drop est possible 
overlap: 0.5,

//les evenement de drop

ondropactivate: function (event) {
//activer la zone de drop
 event.target.classList.add('drop-active');
},
ondragenter: function (event) {
 var draggableElement = event.relatedTarget,
     zoneEchangeElement = event.target;

//la possibilité de drop 
 zoneEchangeElement.classList.add('drop-target');
 draggableElement.classList.add('can-drop');

},
ondragleave: function (event) {
//supprimer le feedback de drop 
 event.target.classList.remove('drop-target');
 event.relatedTarget.classList.remove('can-drop');

 event.relatedTarget.classList.remove('dropped');
 event.relatedTarget.classList.add('artefact');

},
ondrop: function (event) {
//les evenements aprés le drop
// event.relatedTarget.classList.add('dropped');
 event.relatedTarget.classList.remove('can-drop');
 event.relatedTarget.classList.add('artefact');
 
 //$("<div  id= "+event.relatedTarget.id+" class='draggable artefact ' ></div>").appendTo(event.target);


},
ondropdeactivate: function (event) {
//supprimer le drop-active class de la zone de drop 

 event.target.classList.remove('drop-active');
 event.target.classList.remove('drop-target');
}
});

-->

</script>

  <script type="text/javascript">
interact('.menu').on('tap',function (event) { 
	var className = $(event.currentTarget).attr('class');

	if (className == "menu hand") {
  		
  		(event.currentTarget).classList.remove("hand"); 
  		(event.currentTarget).classList.toggle("trash"); 

  	}
  	else if (className =="menu trash")
  	{
  		(event.currentTarget).classList.remove("trash"); 
  		(event.currentTarget).classList.toggle("pen"); 
  	}
  	else if (className =="menu pen") {
  		(event.currentTarget).classList.remove("pen"); 
  		(event.currentTarget).classList.toggle("hand");

  	}})

	
 interact('.trash').dropzone({
  //accepter que les elements avec ce CSS selector
  accept: '.artefact',
  // il faut 10% de l'element overlap pour que le drop soit possible
  overlap: 0.1,

  // les evenements de drop:

  
  ondragenter: function (event) {
    var draggableElement = event.relatedTarget,
        dropzoneElement = event.target;
    // feedback the possibility of a drop
        $(event.relatedTarget).find("h1").hide();
    $(event.relatedTarget).find("p").hide();

    dropzoneElement.classList.add('trash-target');
    draggableElement.classList.add('can-delete');


  },
 
  ondragleave: function (event) {
  
    event.target.classList.remove('trash-target');
    event.relatedTarget.classList.remove('can-delete');
    $(event.relatedTarget).find("h1").show();
    $(event.relatedTarget).find("p").show();
  },
  ondrop: function (event) {
$(event.relatedTarget).fadeOut();

  },
  ondropdeactivate: function (event) {
    // remove active dropzone feedback
    event.target.classList.remove('drop-active');
    event.target.classList.remove('trash-target');
  }
});



</script>

<!-- script pour que les ZoneEchanges soient glissable 


<script type="text/javascript">



//le point est draggable
interact('.zoneEchange')
  .draggable({
    inertia: true,
//l element reste dans sa zone limite , il peut pas sortir de son parent 
    restrict: {
    // restriction: "parent",
      endOnly: true,
      elementRect: { top: 0, left: 0, bottom: 1, right: 1 }
    },
    // activer autoScroll
    autoScroll: true,


//appeler cette fonction a chaque action de glissement 
    onmove: dragMoveListener,
//appeler cette fontion a chaque fin de l'action de glissement 
    onend: function (event) {
    
    }
  })  

</script>    	
    	
    	
    	
    	
    	
    	    
		/* --- cas ou une tablette a été autorisé à se connecter à l'espace de travail --*/
	    socket.on('EVT_NewZEinZP', function(pseudo, idZE ,idZP,posAvatar)
	  	{
	    	//alert('Creation de ZE ='+idZE+' Pour '+pseudo)
	    	$(function () {
	        	if (idZE == "test0") {      	
	        		$("#"+idZE+"").html( "<img id =avatar"+posAvatar+" style ='position:relative ; top: -10 ; right: -50 ; -webkit-transform: rotate(90deg) ; transform: rotate(90deg) ' ></img> ")
	        	}
	        	else if (idZE == "test4") {      	
	        		$("#"+idZE+"").html( "<img id =avatar"+posAvatar+" style ='position:relative ; top:-10 ; left: -10 ; -webkit-transform: rotate(270deg) ; transform: rotate(270deg) ' ></img> ")
	        	}
	        	else if ((idZE == "test1") || (idZE =="test2") || (idZE == "test3")) {    
	        		$("#"+idZE+"").html( "<img id =avatar"+posAvatar+" style ='position:absolute ; bottom:0 ; right: 0 ; -webkit-transform: rotate(180deg) ; transform: rotate(180deg) ' ></img> ")
	        	}
	        	else  {         			
	        		$("#"+idZE+"").html( "<img id =avatar"+posAvatar+" style='position:absolute; top:0; right: 0'></img> ")
	        	}
	        	$("#"+idZE+"").slideDown(1000);
	    	})
	  	});
	  	
    socket.on('EVT_NewArtefactInZE',function(pseudo,idZE,chaineJSON)
    	{ 
    		art=JSON.parse(chaineJSON)

    		if (art.typeArtefact == "image") {
           		art.contenu=(art.contenu).replace(/(\r\n|\n|\r)/gm, ""); //supprimer les caractére spéciaux

    			//var target = $("<div id="+art.idAr+" class='draggable artefact img dropped-image' style='background-image: url(data:image/png;base64,"+art.contenu+")'> </div>");
	            //var target = $("<div  id= "+art.idAr+" class='draggable artefact img dropped-image' >	<img src='data:image/png;base64,"+art.contenu+"'/>  <br> </div>");
         
         	    if (idZE == "test0")  {
    				var target = $("<div id="+art.idAr+" class='draggable artefact img dropped-image left' style='background-image: url(data:image/png;base64,"+art.contenu+")'> </div>");
             	}
             	else if (idZE == "test4") {    var target = $("<div id="+art.idAr+" class='draggable artefact img dropped-image right' style='background-image: url(data:image/png;base64,"+art.contenu+")'> </div>");
				}
             	else if ((idZE == "test1") || (idZE =="test2") || (idZE == "test3")) {    
            		var target = $("<div id="+art.idAr+" class='draggable artefact img dropped-image top' style='background-image: url(data:image/png;base64,"+art.contenu+")'> </div>");
				}
             	else {
             	    var target = $("<div id="+art.idAr+" class='draggable artefact img dropped-image' style='background-image: url(data:image/png;base64,"+art.contenu+")'> </div>");
				}
    		}
    		else {
           		art.contenu=(art.contenu).replace(/(\r\n|\n|\r)/gm, "</br>"); //pour le saut de ligne
  				//var target = $("<div  id= "+art.idAr+" class='draggable artefact msg ' >	<h1> "+art.titre+" </h1> <br> <p style ='display : none'> "+art.contenu+" </p> <br /> </div>")
    			if (idZE == "test0") {  
    				var target = $("<div id="+art.idAr+" class='draggable artefact dropped-msg left'>  <h1> "+art.titre+" </h1> <p style ='display : none'> "+art.contenu+" </p> </div>")
				}
    			else if (idZE == "test4") {  
    				var target = $("<div id="+art.idAr+" class='draggable artefact dropped-msg right'>  <h1> "+art.titre+" </h1> <p style ='display : none'> "+art.contenu+" </p> </div>")
				}
    			else if ((idZE == "test1") || (idZE =="test2") || (idZE == "test3")) {  
    				var target = $("<div id="+art.idAr+" class='draggable artefact dropped-msg top'>  <h1> "+art.titre+" </h1> <p style ='display : none'> "+art.contenu+" </p> </div>")
 				}
    			else {  
    				var target = $("<div id="+art.idAr+" class='draggable artefact dropped-msg '>  <h1> "+art.titre+" </h1> <p style ='display : none'> "+art.contenu+" </p> </div>")
				}
    		}

   		 target.appendTo("#"+idZE+""); 

    });

socket.on('EVT_NewArtefactInZP', function (pseudo,idZP,chaineJSON)
	{		
		art=JSON.parse(chaineJSON)

   		if (art.typeArtefact == "image") {
    		console.log(art.contenu);
    		art.contenu=(art.contenu).replace(/(\r\n|\n|\r)/gm, ""); 
    		var target = $("<div id="+art.idAr+" class='draggable artefact img' style='left:50%; top:50%; position: relative; background-image: url(data:image/png;base64,"+art.contenu+")'> </div>");
   		}
   		else {
       		art.contenu=(art.contenu).replace(/(\r\n|\n|\r)/gm, "</br>"); 
	   		var target = $("<div id="+art.idAr+" class='draggable artefact' style='left:50%; top:50% ;position: relative;'>  <h1> "+art.titre+" </h1> <p> "+art.contenu+" </p> </div>")
   		}
		target.appendTo("#ZP"); 		 
	});
 
socket.on('EVT_Deconnexion', function (pseudo, idZE) {
 	$("#"+idZE+"").fadeOut() ; 

	$(function() {
		$("#"+idZE+"").children("div","img").each (function ()	
				{				
				var className =$(this).attr('class');
				var idAr =  $(this).attr('id');
			
				var position = $(this).position()
				
				function getRotationDegrees(obj) { //stocker l'angle de la rotation
					var matrix = obj.css("-webkit-transform") ||
					obj.css("-moz-transform")    ||
					obj.css("-ms-transform")     ||
					obj.css("-o-transform")      ||
					obj.css("transform");
					if(matrix !== 'none') {
    					var values = matrix.split('(')[1].split(')')[0].split(',');
    					var a = values[0];
   						var b = values[1];
    					var angle = Math.round(Math.atan2(b, a) * (180/Math.PI));
					} else { var angle = 0; }
					return angle;
				}

				angle1= getRotationDegrees($(this));
				//alert(angle1)

				if (className == "draggable artefact"){ 
	
					var titre= $(this).find("h1").text();
					var message= $(this).find("p").text();
	
	   				var target = $("<div id="+idAr+" class='draggable artefact' style='left:"+position.left+"; top:"+position.top+" ;position: absolute; transform: rotate("+angle1+"deg)'>  <h1> "+titre+" </h1> <p> "+message+" </p> </div>");
				}
				else {
					var bg = $(this).css('background-image'); //l'image
					bg=bg.replace('url(','').replace(')','');
					var target = $("<div id="+idAr+" class='draggable artefact img' style='left:"+position.left+"; top:"+position.top+" position: absolute; transform: rotate("+angle1+"deg)'> </div>").css("background-image", "url("+bg+")");
				}
				target.appendTo("#ZP"); 
			});
		});
});


socket.on ('EVT_ArtefactDeletedFromZE', 
	function (idAr, idZE, idZEP)
		 {
			$("#"+idZE+"").find("div[id="+idAr+"]").remove();
		 });
		 

	  	
	
</script>

<script language="JavaScript" type="text/javascript" src="/javascripts/artefactsITAC.js"></script>
<script language="JavaScript" type="text/javascript" src="/javascripts/pointITAC.js"></script>
<script language="JavaScript" type="text/javascript" src="/javascripts/zoneechangeITAC.js"></script>

<script language="JavaScript" type="text/javascript" src="/javascripts/menuITAC.js"></script>    
    


  
  
  
</html>